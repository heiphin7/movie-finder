package com.api.movie_finder.service;

import com.api.movie_finder.dto.MovieDto;
import com.api.movie_finder.model.Movie;
import com.api.movie_finder.repository.MovieRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.HttpEntity;
import org.apache.hc.core5.http.ParseException;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.bytedeco.javacv.FFmpegFrameGrabber;
import org.bytedeco.javacv.Frame;
import org.bytedeco.javacv.Java2DFrameConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Service
@Slf4j
public class MovieService {

    @Autowired
    private MovieRepository movieRepository;

    public Map<String, Object> findByShot(MultipartFile file) throws IOException, ParseException {
        HttpPost post = new HttpPost("http://localhost:8463/find");
        ObjectMapper mapper = new ObjectMapper();

        MultipartEntityBuilder builder = MultipartEntityBuilder.create();
        builder.addBinaryBody("image", file.getInputStream(), ContentType.DEFAULT_BINARY, file.getContentType());

        HttpEntity entity = builder.build();
        post.setEntity(entity);

        CloseableHttpClient closeableHttpClient = HttpClients.createDefault();
        CloseableHttpResponse response = closeableHttpClient.execute(post);

        String clientResponse = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);

        closeableHttpClient.close();
        response.close();

        Map<String, Object> responseValues = mapper.readValue(clientResponse ,Map.class);
        return responseValues;
    }

    @Transactional
    public void uploadNewMovie(MultipartFile file, // mp4
                               MultipartFile preview,
                               MovieDto dto) throws Exception {
        // –ù–∞—á–∞–ª–∏ —Ç–∞–π–º–µ—Ä
        long start = System.currentTimeMillis();
        log.info("–ù–∞—á–∞–ª–∏ —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –æ–±—Ä–µ–∑–∞–Ω–∏–µ–º!");

        // –º–∞–ø–ø–∏–º –¥–∞–Ω–Ω—ã–µ –∏ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º preview –∏ —Å—Ç–∞–≤–∏–º –µ–≥–æ –≤ imgUrl
        Movie movie = new Movie();
        movie.setName(dto.getName());
        movie.setDescription(dto.getDescription());
        movie.setRating(dto.getRating());

        Path previewPath = Path.of("C:\\Users\\rshal\\.privateProjects\\movie-finder\\movie-finder\\src\\main\\resources\\images\\previews");

        preview.transferTo(previewPath.resolve(preview.getOriginalFilename()));
        movie.setImgUrl("/images/previews/" + preview.getOriginalFilename());
        movieRepository.save(movie);

        /*
            –î–∞–ª—å—à–µ –Ω—É–∂–Ω–æ –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –∫–∞–¥—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞ python-service
            –ø–æ—á–µ–º—É –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π? -> –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. –ï—Å–ª–∏ –±—ã –º—ã –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —Ç–æ —ç—Ç–æ —Å–∏–ª—å–Ω–æ
            –±–∏–ª–æ –±—ã –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ –≤—Å–µ –µ—â–µ –æ—Ç —ç—Ç–æ–≥–æ –µ—Å—Ç—å —à–∞–Ω—Å —á—Ç–æ –Ω—É–∂–Ω—ã–π (!–∫–ª—é—á–µ–≤–æ–π) –∫–∞–¥—Ä
            –º–æ–∂–µ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
        */

        Path outputDir = Path.of("C:\\Users\\rshal\\.privateProjects\\movie-finder\\movie-finder\\src\\main\\resources\\images\\screenshots");
        Files.createDirectories(outputDir); // –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π .mp4
        File tempVideo = File.createTempFile("video", ".mp4");
        file.transferTo(tempVideo);

        FFmpegFrameGrabber grabber = new FFmpegFrameGrabber(tempVideo);
        Map<String, Map<String, Integer>> fullPathPhotos = new HashMap<>();
        Java2DFrameConverter converter = new Java2DFrameConverter();

        try {
            grabber.start();

            double duration = grabber.getLengthInTime() / 1_000_000.0; // —Å–µ–∫
            int intervalSeconds = 1;

            for (int sec = 0; sec < (int) duration; sec += intervalSeconds) {
                grabber.setTimestamp(sec * 1_000_000L);

                Frame frame = grabber.grabImage();
                if (frame == null) continue;

                BufferedImage bi = converter.convert(frame);
                UUID id = UUID.randomUUID();
                String fileName = "frame_" + sec + "_" + id + ".png";

                Path imagePath = outputDir.resolve(fileName);
                ImageIO.write(bi, "png", imagePath.toFile());

                // üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
                fullPathPhotos.put(imagePath.toAbsolutePath().toString(), Map.of(movie.getName(), sec));
            }

            grabber.stop();
        } finally {
            grabber.release();
            tempVideo.delete();
        }

        long end = System.currentTimeMillis();
        long duration = end - start;

        log.info("–û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ Java –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞: " + (duration / 1000.0) + " —Å–µ–∫—É–Ω–¥!");
        System.out.println("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ " + (duration / 1000.0) + " —Å–µ–∫—É–Ω–¥.");

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        org.springframework.http.HttpEntity<Map<String, Map<String, Integer>>> request =
                new org.springframework.http.HttpEntity<>(fullPathPhotos, headers); // todo –ø–æ–º–µ–Ω—è—Ç—å fullPathPhotos

        org.springframework.http.ResponseEntity<Void> response =
                restTemplate.postForEntity("http://localhost:8463/upload", request, Void.class);
    }

}